session.tableColumns(oid, columns, maxRepetitions, responseCb)
 -> session.subtree

session.table(oid, maxRepetitions, responseCb)
 -> session.subtree

session.subtree(oid, maxRepetitions, feedCb, doneCb)
 -> session.walk

session.walk(oid, maxRepetitions, feedCb, doneCb)
 -> session.getBulk (v2c)
 -> session.getNext (v1)

All call session.simpleGet:
session.get(oids, responseCb)
session.getNext(oids, responseCb)
session.getBulk(oids, nonRepeaters, maxRepetitions, responseCb)
session.set(varBinds, responseCb)
session.inform(oids, responseCb)

session.simpleGet(
	pduClass: GetRequestPdu (set) | GetNextRequestPdu (getNext) | GetBulkRequestPdu (getBulk) | SetRequestPdu (set) | InformRequestPdu (inform)
	feedCb - feeds the responseCb
	varbinds
	responseCb
	options
)
 -> session.send

session.send(req)
 -> message.toBuffer (RequestMessage - v2 message w/ community)
 -> this.registerRequest(req)

SimplePdu.toBuffer
 -> writeVarBinds



simpleGet calls new simplePdu

SimplePdu (id, varbinds, options) - superclass of:
 - GetBulkRequestPdu
 - GetNextRequestPdu
 - GetRequestPdu
 - InformRequestPdu
 - SetRequestPdu

 - TrapV2Pdu

but not:
 - TrapPdu
 - GetResponsePdu


Session public API:

snmp.createSession(target, community, options)
snmp.createV3Session(target, user, options)


MIB public API:

mib.addProvider (definition)
mib.deleteProvider (name)
mib.getProviders ()
mib.getProvider (name)

//mib.addScalarValue(scalar)
mib.getScalarValue(scalar)
mib.setScalarValue(scalar, value)
//mib.deleteScalarValue(scalar)

mib.addTableRow (table, row)
[]
{
   ifIndex: 1
   ifDescr: "sdf"
}
mib.getTableColumnDefinitions(table)
mib.getTableCells(table)
mib.getTableColumnCells(table, columnNumber)
mib.getTableRowCells (table, rowIndex[])
mib.getTableSingleCell(table, columnIndex, rowIndex[])
mib.setTableSingleCell(table, columnIndex, rowIndex[], value)
mib.deleteTableRow (table, rowIndex[])

rowIndex
int
oid
string
[]


Agent

agent = snmp.create(options, callback)
agent.getMib()
agent.getAuthorizer()
agent.addProvider (definition)
agent.deleteProvider (name)
agent.getProviders ()
agent.getProvider (name)

Authorizer

Agent table index improvements:

Done:
foreign
augments
composite
non-integer - octet string
non-integer - oid


tableIndex: [
    {
        "foreign": "ifEntry"
        "column": "ifIndex",
        "columnNumber": 1
        "type": ObjectType.Integer
    },
    {
        "column": "ifXIndex",
        "columnNumber": 1
    }
]
tableIndex: [ "ifIndex", "ifAddress" ]
tableIndex: [ 1, 3 ]

tableAugments: providerName


]
